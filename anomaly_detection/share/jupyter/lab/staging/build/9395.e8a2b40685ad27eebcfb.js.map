{"version":3,"file":"9395.e8a2b40685ad27eebcfb.js?v=e8a2b40685ad27eebcfb","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/lodash-es/clone.js","webpack://@jupyterlab/application-top/./node_modules/dagre-d3-es/src/graphlib/json.js","webpack://@jupyterlab/application-top/./node_modules/mermaid/dist/index-0980fb80.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-5ec2587c.js\";\nimport { l as log, m as evaluate, c as getConfig } from \"./mermaid-04fb0060.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-a48a4c90.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId) => {\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  label.attr(\n    \"transform\",\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramtype, id, parentCluster) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(nodes, node.graph, diagramtype, id, graph.node(v));\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  await recursiveRender(elem, graph, diagramtype, id);\n};\nexport {\n  render as r\n};\n"],"names":["CLONE_SYMBOLS_FLAG","clone","value","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","read","Graph","setGraph","_","each","entry","setNode","setParent","setEdge","clusterDb","descendants","parents","clear$1","isDescendant","id","ancenstorId","l","includes","edgeInCluster","clusterId","copy","newGraph","rootId","children","push","forEach","length","data","data2","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","d1","d2","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster","extractor","hasChildren","graphSettings","dir","rankdir","clusterGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","sorter","result","Object","assign","sorted","sortNodesByHierarchy","rect","shapeSvg","insert","attr","class","rect2","useHtmlLabels","flowchart","htmlLabels","text","labelType","appendChild","c","bbox","getBBox","div","dv","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","x","y","rectBox","intersect","point","i","noteGroup","roundedWithTitle","classes","innerRect","append","divider","shapes","clusterElems","insertCluster","elem","clear","recursiveRender","async","_elem","diagramtype","parentCluster","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","u","s","p","paths","n","type","render","markers"],"sourceRoot":""}