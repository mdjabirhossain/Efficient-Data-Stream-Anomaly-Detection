{"version":3,"file":"2800.f9c514bc64cda893aa5e.js?v=f9c514bc64cda893aa5e","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/crelt/index.es.js","webpack://@jupyterlab/application-top/./node_modules/@codemirror/search/dist/index.js"],"sourcesContent":["export default function crelt() {\n  var elt = arguments[0]\n  if (typeof elt == \"string\") elt = document.createElement(elt)\n  var i = 1, next = arguments[1]\n  if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\n    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {\n      var value = next[name]\n      if (typeof value == \"string\") elt.setAttribute(name, value)\n      else if (value != null) elt[name] = value\n    }\n    i++\n  }\n  for (; i < arguments.length; i++) add(elt, arguments[i])\n  return elt\n}\n\nfunction add(elt, child) {\n  if (typeof child == \"string\") {\n    elt.appendChild(document.createTextNode(child))\n  } else if (child == null) {\n  } else if (child.nodeType != null) {\n    elt.appendChild(child)\n  } else if (Array.isArray(child)) {\n    for (var i = 0; i < child.length; i++) add(elt, child[i])\n  } else {\n    throw new RangeError(\"Unsupported child node: \" + child)\n  }\n}\n","import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\n\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\n    ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\nclass SearchCursor {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */\n        this.value = { from: 0, to: 0 };\n        /**\n        Whether the end of the iterated region has been reached.\n        */\n        this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done)\n                return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return codePointAt(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */\n    next() {\n        while (this.matches.length)\n            this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */\n    nextOverlapping() {\n        for (;;) {\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += codePointSize(next);\n            let norm = this.normalize(str);\n            for (let i = 0, pos = start;; i++) {\n                let code = norm.charCodeAt(i);\n                let match = this.match(code, pos, this.bufferPos + this.bufferStart);\n                if (i == norm.length - 1) {\n                    if (match) {\n                        this.value = match;\n                        return this;\n                    }\n                    break;\n                }\n                if (pos == start && i < str.length && str.charCodeAt(i) == code)\n                    pos++;\n            }\n        }\n    }\n    match(code, pos, end) {\n        let match = null;\n        for (let i = 0; i < this.matches.length; i += 2) {\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) {\n                    match = { from: this.matches[i + 1], to: end };\n                }\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1)\n                match = { from: pos, to: end };\n            else\n                this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))\n            match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\")\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\n\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\nclass RegExpCursor {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */\n    constructor(text, query, options, from = 0, to = text.length) {\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */\n        this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */\n        this.value = empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\n            return new MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) {\n            this.curLine = \"\";\n        }\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to)\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to)\n            this.curLine = \"\";\n        else\n            this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */\n    next() {\n        for (let off = this.matchPos - this.curLineStart;;) {\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLineStart + this.curLine.length)\n                    this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            }\n            else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            }\n            else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst flattened = /*@__PURE__*/new WeakMap();\n// Reusable (partially) flattened document strings\nclass FlattenedDoc {\n    constructor(from, text) {\n        this.from = from;\n        this.text = text;\n    }\n    get to() { return this.from + this.text.length; }\n    static get(doc, from, to) {\n        let cached = flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n            flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to)\n            return cached;\n        let { text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to)\n            text += doc.sliceString(cached.to, to);\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass MultilineRegExpCursor {\n    constructor(text, query, options, from, to) {\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = empty;\n        this.matchPos = toCharEnd(text, from);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for (;;) {\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\n                    (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\n        function () { return this; };\n}\nfunction validRegExp(source) {\n    try {\n        new RegExp(source, baseFlags);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction toCharEnd(text, pos) {\n    if (pos >= text.length)\n        return pos;\n    let line = text.lineAt(pos), next;\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\n        pos++;\n    return pos;\n}\n\nfunction createLineDialog(view) {\n    let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);\n    let input = elt(\"input\", { class: \"cm-textfield\", name: \"line\", value: line });\n    let dom = elt(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event) => {\n            if (event.keyCode == 27) { // Escape\n                event.preventDefault();\n                view.dispatch({ effects: dialogEffect.of(false) });\n                view.focus();\n            }\n            else if (event.keyCode == 13) { // Enter\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event) => {\n            event.preventDefault();\n            go();\n        }\n    }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match)\n            return;\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign)\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\n            line = Math.round(state.doc.lines * pc);\n        }\n        else if (ln && sign) {\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        }\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));\n        view.dispatch({\n            effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: 'center' })],\n            selection,\n        });\n        view.focus();\n    }\n    return { dom };\n}\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n    create() { return true; },\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(dialogEffect))\n                value = e.value;\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n*/\nconst gotoLine = view => {\n    let panel = getPanel(view, createLineDialog);\n    if (!panel) {\n        let effects = [dialogEffect.of(true)];\n        if (view.state.field(dialogField, false) == null)\n            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n        view.dispatch({ effects });\n        panel = getPanel(view, createLineDialog);\n    }\n    if (panel)\n        panel.dom.querySelector(\"input\").select();\n    return true;\n};\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        \"& label\": { fontSize: \"80%\" }\n    }\n});\n\nconst defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n    combine(options) {\n        return combineConfig(options, defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b) => a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\nfunction highlightSelectionMatches(options) {\n    let ext = [defaultTheme, matchHighlighter];\n    if (options)\n        ext.push(highlightConfig.of(options));\n    return ext;\n}\nconst matchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch\" });\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\n// Whether the characters directly outside the given positions are non-word characters\nfunction insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word\n        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet(highlightConfig);\n        let { state } = view, sel = state.selection;\n        if (sel.ranges.length > 1)\n            return Decoration.none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor)\n                return Decoration.none;\n            let word = state.wordAt(range.head);\n            if (!word)\n                return Decoration.none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        }\n        else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200)\n                return Decoration.none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!(insideWordBoundaries(check, state, range.from, range.to) &&\n                    insideWord(check, state, range.from, range.to)))\n                    return Decoration.none;\n            }\n            else {\n                query = state.sliceDoc(range.from, range.to);\n                if (!query)\n                    return Decoration.none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges) {\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n            while (!cursor.next().done) {\n                let { from, to } = cursor.value;\n                if (!check || insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to)\n                        deco.push(mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from)\n                        deco.push(matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches)\n                        return Decoration.none;\n                }\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\n});\n// Select the words around the cursors.\nconst selectWord = ({ state, dispatch }) => {\n    let { selection } = state;\n    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection))\n        return false;\n    dispatch(state.update({ selection: newSel }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction findNextOccurrence(state, query) {\n    let { main, ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n        cursor.next();\n        if (cursor.done) {\n            if (cycled)\n                return null;\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        }\n        else {\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\n                continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\n                    continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\nconst selectNextOccurrence = ({ state, dispatch }) => {\n    let { ranges } = state.selection;\n    if (ranges.some(sel => sel.from === sel.to))\n        return selectWord({ state, dispatch });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\n        return false;\n    let range = findNextOccurrence(state, searchedText);\n    if (!range)\n        return false;\n    dispatch(state.update({\n        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n        effects: EditorView.scrollIntoView(range.to)\n    }));\n    return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            regexp: false,\n            wholeWord: false,\n            createPanel: view => new SearchPanel(view),\n            scrollToMatch: range => EditorView.scrollIntoView(range)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\nfunction search(config) {\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\nclass SearchQuery {\n    /**\n    Create a query object.\n    */\n    constructor(config) {\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n        this.unquoted = this.unquote(this.search);\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    @internal\n    */\n    unquote(text) {\n        return this.literal ? text :\n            text.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n    }\n    /**\n    Compare this query to another query.\n    */\n    eq(other) {\n        return this.search == other.search && this.replace == other.replace &&\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\n            this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */\n    create() {\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */\n    getCursor(state, from = 0, to) {\n        let st = state.doc ? state : EditorState.create({ doc: state });\n        if (to == null)\n            to = st.doc.length;\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n    }\n}\nclass QueryType {\n    constructor(spec) {\n        this.spec = spec;\n    }\n}\nfunction stringCursor(spec, state, from, to) {\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos) => {\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||\n            categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&\n            (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||\n                categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);\n    };\n}\nclass StringQuery extends QueryType {\n    constructor(spec) {\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done)\n            cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\n        return cursor.done ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing an inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for (let pos = to;;) {\n            let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\n            while (!cursor.nextOverlapping().done)\n                range = cursor.value;\n            if (range)\n                return range;\n            if (start == from)\n                return null;\n            pos -= 10000 /* FindPrev.ChunkSize */;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }\n    matchAll(state, limit) {\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction regexpCursor(spec, state, from, to) {\n    return new RegExpCursor(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction charBefore(str, index) {\n    return str.slice(findClusterBreak(str, index, false), index);\n}\nfunction charAfter(str, index) {\n    return str.slice(index, findClusterBreak(str, index));\n}\nfunction regexpWordTest(categorizer) {\n    return (_from, _to, match) => !match[0].length ||\n        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||\n            categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&\n            (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||\n                categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);\n}\nclass RegExpQuery extends QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done)\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for (let size = 1;; size++) {\n            let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\n            while (!cursor.next().done)\n                range = cursor.value;\n            if (range && (start == from || range.from > start + 10))\n                return range;\n            if (start == from)\n                return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.unquote(this.spec.replace).replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\n            : i == \"&\" ? result.match[0]\n                : i != \"0\" && +i < result.match.length ? result.match[i]\n                    : m);\n    }\n    matchAll(state, limit) {\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n    create(state) {\n        return new SearchState(defaultQuery(state).create(), null);\n    },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setSearchQuery))\n                value = new SearchState(effect.value.create(), value.panel);\n            else if (effect.is(togglePanel))\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\nfunction getSearchQuery(state) {\n    let curState = state.field(searchState, false);\n    return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\nfunction searchPanelOpen(state) {\n    var _a;\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass SearchState {\n    constructor(query, panel) {\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.decorations = this.highlight(view.state.field(searchState));\n    }\n    update(update) {\n        let state = update.state.field(searchState);\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\n            this.decorations = this.highlight(state);\n    }\n    highlight({ query, panel }) {\n        if (!panel || !query.spec.valid)\n            return Decoration.none;\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: v => v.decorations\n});\nfunction searchCommand(f) {\n    return view => {\n        let state = view.state.field(searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next)\n        return false;\n    let selection = EditorSelection.single(next.from, next.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from } = state.selection.main;\n    let prev = query.prevMatch(state, from, from);\n    if (!prev)\n        return false;\n    let selection = EditorSelection.single(prev.from, prev.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length)\n        return false;\n    view.dispatch({\n        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\nconst selectSelectionMatches = ({ state, dispatch }) => {\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty)\n        return false;\n    let { from, to } = sel.main;\n    let ranges = [], main = 0;\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n        if (ranges.length > 1000)\n            return false;\n        if (cur.value.from == from)\n            main = ranges.length;\n        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: EditorSelection.create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from, to } = state.selection.main;\n    if (state.readOnly)\n        return false;\n    let next = query.nextMatch(state, from, from);\n    if (!next)\n        return false;\n    let changes = [], selection, replacement;\n    let effects = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({ from: next.from, to: next.to, insert: replacement });\n        next = query.nextMatch(state, next.from, next.to);\n        effects.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\n        selection = EditorSelection.single(next.from - off, next.to - off);\n        effects.push(announceMatch(view, next));\n        effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));\n    }\n    view.dispatch({\n        changes, selection, effects,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\n    if (view.state.readOnly)\n        return false;\n    let changes = query.matchAll(view.state, 1e9).map(match => {\n        let { from, to } = match;\n        return { from, to, insert: query.getReplacement(match) };\n    });\n    if (!changes.length)\n        return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes,\n        effects: EditorView.announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction createSearchPanel(view) {\n    return view.state.facet(searchConfigFacet).createPanel(view);\n}\nfunction defaultQuery(state, fallback) {\n    var _a, _b, _c, _d, _e;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText)\n        return fallback;\n    let config = state.facet(searchConfigFacet);\n    return new SearchQuery({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,\n        wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord\n    });\n}\nfunction getSearchInput(view) {\n    let panel = getPanel(view, createSearchPanel);\n    return panel && panel.dom.querySelector(\"[main-field]\");\n}\nfunction selectSearchInput(view) {\n    let input = getSearchInput(view);\n    if (input && input == view.root.activeElement)\n        input.select();\n}\n/**\nMake sure the search panel is open and focused.\n*/\nconst openSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (state && state.panel) {\n        let searchInput = getSearchInput(view);\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = defaultQuery(view.state, state.query.spec);\n            if (query.valid)\n                view.dispatch({ effects: setSearchQuery.of(query) });\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    else {\n        view.dispatch({ effects: [\n                togglePanel.of(true),\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)\n            ] });\n    }\n    return true;\n};\n/**\nClose the search panel.\n*/\nconst closeSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (!state || !state.panel)\n        return false;\n    let panel = getPanel(view, createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement))\n        view.focus();\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\nconst searchKeymap = [\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n    { key: \"Mod-Alt-g\", run: gotoLine },\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\n];\nclass SearchPanel {\n    constructor(view) {\n        this.view = view;\n        let query = this.query = view.state.field(searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = elt(\"input\", {\n            value: query.search,\n            placeholder: phrase(view, \"Find\"),\n            \"aria-label\": phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            form: \"\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = elt(\"input\", {\n            value: query.replace,\n            placeholder: phrase(view, \"Replace\"),\n            \"aria-label\": phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            form: \"\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            form: \"\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            form: \"\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            form: \"\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return elt(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\n        }\n        this.dom = elt(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\n            this.searchField,\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\n            elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\n            elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\n            elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\n            ...view.state.readOnly ? [] : [\n                elt(\"br\"),\n                this.replaceField,\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")])\n            ],\n            elt(\"button\", {\n                name: \"close\",\n                onclick: () => closeSearchPanel(view),\n                \"aria-label\": phrase(view, \"close\"),\n                type: \"button\"\n            }, [\"×\"])\n        ]);\n    }\n    commit() {\n        let query = new SearchQuery({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value,\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\n        }\n    }\n    keydown(e) {\n        if (runScopeHandlers(this.view, e, \"search-panel\")) {\n            e.preventDefault();\n        }\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? findPrevious : findNext)(this.view);\n        }\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            replaceNext(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)\n            for (let effect of tr.effects) {\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\n                    this.setQuery(effect.value);\n            }\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() { return 80; }\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\n}\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\nfunction announceMatch(view, { from, to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for (let i = 0; i < AnnounceMargin; i++)\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n                text = text.slice(i);\n                break;\n            }\n    }\n    if (end != lineEnd) {\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n                text = text.slice(0, i);\n                break;\n            }\n    }\n    return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\n});\nconst searchExtensions = [\n    searchState,\n    /*@__PURE__*/Prec.low(searchHighlighter),\n    baseTheme\n];\n\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };\n"],"names":["crelt","elt","arguments","document","createElement","i","next","nodeType","Array","isArray","name","Object","prototype","hasOwnProperty","call","value","setAttribute","length","add","child","appendChild","createTextNode","RangeError","basicNormalize","String","normalize","x","SearchCursor","constructor","text","query","from","to","test","this","done","matches","buffer","bufferPos","iter","iterRange","bufferStart","peek","codePointAt","pop","nextOverlapping","str","fromCodePoint","start","codePointSize","norm","pos","code","charCodeAt","match","end","index","keep","splice","push","Symbol","iterator","empty","exec","baseFlags","unicode","RegExpCursor","options","curLine","MultilineRegExpCursor","re","RegExp","ignoreCase","startLine","lineAt","curLineStart","matchPos","toCharEnd","getLine","skip","lineBreak","slice","nextLine","off","lastIndex","flattened","WeakMap","FlattenedDoc","static","doc","cached","get","flat","sliceString","set","cachedFrom","chunkEnd","validRegExp","source","_a","line","createLineDialog","view","state","selection","main","head","number","input","class","dom","onkeydown","event","keyCode","preventDefault","dispatch","effects","dialogEffect","of","focus","go","onsubmit","phrase","type","sign","ln","cl","percent","col","pc","lines","Math","round","docLine","max","min","EditorSelection","EditorView","y","StateEffect","dialogField","StateField","create","update","tr","e","is","provide","f","showPanel","val","gotoLine","panel","getPanel","field","baseTheme$1","querySelector","select","padding","fontSize","defaultHighlightOptions","highlightWordAroundCursor","minSelectionLength","maxMatches","wholeWords","highlightConfig","Facet","combine","combineConfig","a","b","highlightSelectionMatches","ext","defaultTheme","matchHighlighter","matchDeco","Decoration","mainMatchDeco","insideWordBoundaries","check","sliceDoc","CharCategory","insideWord","ViewPlugin","decorations","getDeco","selectionSet","docChanged","viewportChanged","conf","facet","sel","ranges","range","word","wordAt","charCategorizer","len","deco","part","visibleRanges","cursor","v","backgroundColor","selectWord","newSel","map","mainIndex","eq","findNextOccurrence","fullWord","cycled","some","r","selectNextOccurrence","searchedText","addRange","searchConfigFacet","configs","top","caseSensitive","literal","regexp","wholeWord","createPanel","SearchPanel","scrollToMatch","search","config","searchExtensions","SearchQuery","replace","valid","unquoted","unquote","_","ch","other","RegExpQuery","StringQuery","getCursor","st","EditorState","regexpCursor","stringCursor","QueryType","spec","undefined","toLowerCase","stringWordTest","categorizer","buf","bufPos","charBefore","charAfter","super","nextMatch","curFrom","curTo","prevMatchInRange","prevMatch","getReplacement","_result","matchAll","limit","highlight","regexpWordTest","findClusterBreak","_from","_to","size","result","m","setSearchQuery","togglePanel","searchState","SearchState","defaultQuery","effect","createSearchPanel","getSearchQuery","curState","searchPanelOpen","matchMark","selectedMatchMark","searchHighlighter","startState","builder","RangeSetBuilder","l","selected","finish","searchCommand","openSearchPanel","findNext","announceMatch","userEvent","selectSearchInput","findPrevious","prev","selectMatches","selectSelectionMatches","cur","replaceNext","readOnly","changes","replacement","toText","insert","replaceAll","announceText","fallback","_b","_c","_d","_e","selText","getSearchInput","root","activeElement","searchInput","closeSearchPanel","contains","searchKeymap","key","run","scope","shift","commit","bind","searchField","placeholder","form","onchange","onkeyup","replaceField","caseField","checked","reField","wordField","button","onclick","content","keydown","runScopeHandlers","target","shiftKey","transactions","setQuery","mount","AnnounceMargin","Break","lineEnd","baseTheme","position","right","border","font","margin","marginRight","whiteSpace","Prec"],"sourceRoot":""}