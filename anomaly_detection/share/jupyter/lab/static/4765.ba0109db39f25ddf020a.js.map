{"version":3,"file":"4765.ba0109db39f25ddf020a.js?v=ba0109db39f25ddf020a","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/mermaid/dist/classDiagram-v2-36dc72da.js"],"sourcesContent":["import { p as parser, d as db, s as styles } from \"./styles-9dd40fb9.js\";\nimport { select, curveLinear } from \"d3\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { l as log, c as getConfig, u as utils, o as setupGraphViewbox, k as getStylesFromArray, n as interpolateToCurve, e as common } from \"./mermaid-04fb0060.js\";\nimport { r as render } from \"./index-0980fb80.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-5ec2587c.js\";\nimport \"./createText-a48a4c90.js\";\nimport \"mdast-util-from-markdown\";\nconst sanitizeText = (txt) => common.sanitizeText(txt, getConfig());\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: void 0\n};\nconst addNamespaces = function(namespaces, g, _id, diagObj) {\n  const keys = Object.keys(namespaces);\n  log.info(\"keys:\", keys);\n  log.info(namespaces);\n  keys.forEach(function(id) {\n    var _a, _b;\n    const vertex = namespaces[id];\n    const shape = \"rect\";\n    const node = {\n      shape,\n      id: vertex.id,\n      domId: vertex.domId,\n      labelText: sanitizeText(vertex.id),\n      labelStyle: \"\",\n      style: \"fill: none; stroke: black\",\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: ((_a = getConfig().flowchart) == null ? void 0 : _a.padding) ?? ((_b = getConfig().class) == null ? void 0 : _b.padding)\n    };\n    g.setNode(vertex.id, node);\n    addClasses(vertex.classes, g, _id, diagObj, vertex.id);\n    log.info(\"setNode\", node);\n  });\n};\nconst addClasses = function(classes, g, _id, diagObj, parent) {\n  const keys = Object.keys(classes);\n  log.info(\"keys:\", keys);\n  log.info(classes);\n  keys.filter((id) => classes[id].parent == parent).forEach(function(id) {\n    var _a, _b;\n    const vertex = classes[id];\n    const cssClassStr = vertex.cssClasses.join(\" \");\n    const styles2 = getStylesFromArray(vertex.styles);\n    const vertexText = vertex.label ?? vertex.id;\n    const radius = 0;\n    const shape = \"class_box\";\n    const node = {\n      labelStyle: styles2.labelStyle,\n      shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssClassStr,\n      style: styles2.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id, parent) || \"\",\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === \"group\" ? 500 : void 0,\n      type: vertex.type,\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: ((_a = getConfig().flowchart) == null ? void 0 : _a.padding) ?? ((_b = getConfig().class) == null ? void 0 : _b.padding)\n    };\n    g.setNode(vertex.id, node);\n    if (parent) {\n      g.setParent(vertex.id, parent);\n    }\n    log.info(\"setNode\", node);\n  });\n};\nconst addNotes = function(notes, g, startEdgeId, classes) {\n  log.info(notes);\n  notes.forEach(function(note, i) {\n    var _a, _b;\n    const vertex = note;\n    const cssNoteStr = \"\";\n    const styles2 = { labelStyle: \"\", style: \"\" };\n    const vertexText = vertex.text;\n    const radius = 0;\n    const shape = \"note\";\n    const node = {\n      labelStyle: styles2.labelStyle,\n      shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles2.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: \"\",\n      type: \"note\",\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: ((_a = getConfig().flowchart) == null ? void 0 : _a.padding) ?? ((_b = getConfig().class) == null ? void 0 : _b.padding)\n    };\n    g.setNode(vertex.id, node);\n    log.info(\"setNode\", node);\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n    const edgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: \"relation\",\n      pattern: \"dotted\",\n      // Set link type for rendering\n      arrowhead: \"none\",\n      //Set edge extra labels\n      startLabelRight: \"\",\n      endLabelLeft: \"\",\n      //Set relation arrow types\n      arrowTypeStart: \"none\",\n      arrowTypeEnd: \"none\",\n      style: \"fill:none\",\n      labelStyle: \"\",\n      curve: interpolateToCurve(conf.curve, curveLinear)\n    };\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\nconst addRelations = function(relations, g) {\n  const conf2 = getConfig().flowchart;\n  let cnt = 0;\n  relations.forEach(function(edge) {\n    var _a;\n    cnt++;\n    const edgeData = {\n      //Set relationship style and line type\n      classes: \"relation\",\n      pattern: edge.relation.lineType == 1 ? \"dashed\" : \"solid\",\n      id: `id_${edge.id1}_${edge.id2}_${cnt}`,\n      // Set link type for rendering\n      arrowhead: edge.type === \"arrow_open\" ? \"none\" : \"normal\",\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === \"none\" ? \"\" : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === \"none\" ? \"\" : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: \"fill:none\",\n      labelStyle: \"\",\n      curve: interpolateToCurve(conf2 == null ? void 0 : conf2.curve, curveLinear)\n    };\n    log.info(edgeData, edge);\n    if (edge.style !== void 0) {\n      const styles2 = getStylesFromArray(edge.style);\n      edgeData.style = styles2.style;\n      edgeData.labelStyle = styles2.labelStyle;\n    }\n    edge.text = edge.title;\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n      if (((_a = getConfig().flowchart) == null ? void 0 : _a.htmlLabels) ?? getConfig().htmlLabels) {\n        edgeData.labelType = \"html\";\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + \"</span>\";\n      } else {\n        edgeData.labelType = \"text\";\n        edgeData.label = edge.text.replace(common.lineBreakRegex, \"\\n\");\n        if (edge.style === void 0) {\n          edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none\";\n        }\n        edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n      }\n    }\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\nconst setConf = function(cnf) {\n  conf = {\n    ...conf,\n    ...cnf\n  };\n};\nconst draw = async function(text, id, _version, diagObj) {\n  log.info(\"Drawing class - \", id);\n  const conf2 = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info(\"config:\", conf2);\n  const nodeSpacing = (conf2 == null ? void 0 : conf2.nodeSpacing) ?? 50;\n  const rankSpacing = (conf2 == null ? void 0 : conf2.rankSpacing) ?? 50;\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: diagObj.db.getDirection(),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const namespaces = diagObj.db.getNamespaces();\n  const classes = diagObj.db.getClasses();\n  const relations = diagObj.db.getRelations();\n  const notes = diagObj.db.getNotes();\n  log.info(relations);\n  addNamespaces(namespaces, g, id, diagObj);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(\n    element,\n    g,\n    [\"aggregation\", \"extension\", \"composition\", \"dependency\", \"lollipop\"],\n    \"classDiagram\",\n    id\n  );\n  utils.insertTitle(svg, \"classTitleText\", (conf2 == null ? void 0 : conf2.titleTopMargin) ?? 5, diagObj.db.getDiagramTitle());\n  setupGraphViewbox(g, svg, conf2 == null ? void 0 : conf2.diagramPadding, conf2 == null ? void 0 : conf2.useMaxWidth);\n  if (!(conf2 == null ? void 0 : conf2.htmlLabels)) {\n    const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      const dim = label.getBBox();\n      const rect = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n      rect.setAttribute(\"rx\", 0);\n      rect.setAttribute(\"ry\", 0);\n      rect.setAttribute(\"width\", dim.width);\n      rect.setAttribute(\"height\", dim.height);\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\nfunction getArrowMarker(type) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = \"aggregation\";\n      break;\n    case 1:\n      marker = \"extension\";\n      break;\n    case 2:\n      marker = \"composition\";\n      break;\n    case 3:\n      marker = \"dependency\";\n      break;\n    case 4:\n      marker = \"lollipop\";\n      break;\n    default:\n      marker = \"none\";\n  }\n  return marker;\n}\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["sanitizeText","txt","conf","dividerMargin","padding","textHeight","curve","addNamespaces","namespaces","g","_id","diagObj","keys","Object","l","forEach","id","_a","_b","vertex","shape","node","domId","labelText","labelStyle","style","flowchart","class","setNode","addClasses","classes","parent","filter","cssClassStr","cssClasses","join","styles2","styles","vertexText","label","radius","classData","rx","ry","tooltip","db","getTooltip","haveCallback","link","width","type","setParent","addNotes","notes","startEdgeId","note","i","cssNoteStr","text","noteData","edgeId","edgeData","pattern","arrowhead","startLabelRight","endLabelLeft","arrowTypeStart","arrowTypeEnd","setEdge","addRelations","relations","conf2","cnt","edge","relation","lineType","id1","id2","relationTitle1","relationTitle2","getArrowMarker","type1","type2","title","arrowheadStyle","labelpos","htmlLabels","labelType","replace","setConf","cnf","draw","async","_version","securityLevel","nodeSpacing","rankSpacing","multigraph","compound","setGraph","rankdir","getDirection","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","getNamespaces","getClasses","getRelations","getNotes","length","sandboxElement","root","nodes","contentDocument","body","svg","select","element","r","u","titleTopMargin","getDiagramTitle","diagramPadding","useMaxWidth","doc","document","labels","querySelectorAll","dim","getBBox","rect","createElementNS","setAttribute","height","insertBefore","firstChild","marker","renderer","diagram","parser","init","arrowMarkerAbsolute","d"],"sourceRoot":""}